name: SmartSAST - AI-Enhanced Security Analysis

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 1 * * *'  # Daily at 1AM

jobs:
  smartsast-analysis:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js (if applicable)
      if: hashFiles('package.json') != ''
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python (if applicable)
      if: hashFiles('requirements.txt', 'pyproject.toml', '*.py') != ''
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f yarn.lock ]; then
            npm install -g yarn && yarn install --frozen-lockfile
          else
            npm install
          fi
        fi
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
    
    - name: Enhanced Semgrep Scan
      run: |
        # Install latest Semgrep
        python3 -m pip install semgrep
        
        # Run comprehensive Semgrep analysis
        semgrep \
          --config=p/security-audit \
          --config=p/secrets \
          --config=p/owasp-top-ten \
          --config=p/cwe-top-25 \
          --config=p/default \
          --json \
          --output=semgrep-raw.json \
          --verbose \
          .
    
    - name: Code Context Extraction
      run: |
        # Extract code context for each finding
        python3 << 'EOF'
        import json
        import os
        
        with open('semgrep-raw.json', 'r') as f:
            data = json.load(f)
        
        enhanced_findings = []
        
        for result in data.get('results', []):
            finding = {
                'rule_id': result.get('check_id'),
                'message': result.get('message'),
                'severity': result.get('extra', {}).get('severity', 'INFO'),
                'path': result.get('path'),
                'start_line': result.get('start', {}).get('line'),
                'end_line': result.get('end', {}).get('line'),
                'code_snippet': '',
                'file_context': ''
            }
            
            # Extract code context
            try:
                with open(finding['path'], 'r', encoding='utf-8') as code_file:
                    lines = code_file.readlines()
                    start = max(0, finding['start_line'] - 6)
                    end = min(len(lines), finding['end_line'] + 5)
                    
                    finding['code_snippet'] = ''.join(lines[finding['start_line']-1:finding['end_line']])
                    finding['file_context'] = ''.join(lines[start:end])
            except:
                finding['code_snippet'] = 'Unable to extract code snippet'
                finding['file_context'] = 'Unable to extract file context'
            
            enhanced_findings.append(finding)
        
        with open('enhanced-findings.json', 'w') as f:
            json.dump(enhanced_findings, f, indent=2)
        EOF
    
    - name: Upload to AutoSec SmartSAST for AI Analysis
      env:
        AUTOSEC_API_KEY: ${{ secrets.AUTOSEC_API_KEY }}
        AUTOSEC_ENDPOINT: ${{ vars.AUTOSEC_ENDPOINT }}
      run: |
        # Send enhanced findings to SmartSAST for GPT-4 analysis
        curl -X POST "$AUTOSEC_ENDPOINT/api/smart-sast/upload" \
          -H "Authorization: Bearer $AUTOSEC_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{
            \"scanType\": \"smartsast\",
            \"repoName\": \"${{ github.repository }}\",
            \"branch\": \"${{ github.ref_name }}\",
            \"commitHash\": \"${{ github.sha }}\",
            \"scanData\": $(cat enhanced-findings.json),
            \"metadata\": {
              \"scan_timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
              \"total_findings\": $(jq 'length' enhanced-findings.json),
              \"repository_size\": \"$(du -sh . | cut -f1)\",
              \"languages_detected\": $(find . -type f -name '*.js' -o -name '*.py' -o -name '*.java' -o -name '*.go' -o -name '*.rb' -o -name '*.php' | sed 's/.*\.//g' | sort | uniq -c | jq -R -s 'split(\"\\n\")[:-1] | map(split(\" \") | {count: .[0], language: .[1]})'),
              \"git_author\": \"${{ github.actor }}\",
              \"pr_number\": \"${{ github.event.number }}\"
            }
          }"
    
    - name: Wait for SmartSAST Analysis
      run: |
        echo "Waiting for AI analysis to complete..."
        sleep 30  # Give SmartSAST time to process
    
    - name: Retrieve AI-Enhanced Results
      env:
        AUTOSEC_API_KEY: ${{ secrets.AUTOSEC_API_KEY }}
        AUTOSEC_ENDPOINT: ${{ vars.AUTOSEC_ENDPOINT }}
      run: |
        # Retrieve the AI-enhanced analysis
        SCAN_ID=$(curl -s -H "Authorization: Bearer $AUTOSEC_API_KEY" \
          "$AUTOSEC_ENDPOINT/api/smart-sast/scans?repo=${{ github.repository }}&commit=${{ github.sha }}" \
          | jq -r '.[0].id // empty')
        
        if [ ! -z "$SCAN_ID" ]; then
          curl -s -H "Authorization: Bearer $AUTOSEC_API_KEY" \
            "$AUTOSEC_ENDPOINT/api/smart-sast/scans/$SCAN_ID" \
            | jq '.gptAnalysis' > ai-enhanced-results.json
          
          echo "AI analysis retrieved successfully"
        else
          echo "No AI analysis available yet"
          echo '{}' > ai-enhanced-results.json
        fi
    
    - name: Generate Security Report
      run: |
        python3 << 'EOF'
        import json
        from datetime import datetime
        
        # Load AI-enhanced results
        try:
            with open('ai-enhanced-results.json', 'r') as f:
                ai_results = json.load(f)
        except:
            ai_results = {}
        
        # Load original findings
        with open('enhanced-findings.json', 'r') as f:
            findings = json.load(f)
        
        # Generate executive summary
        total_findings = len(findings)
        critical_findings = len([f for f in findings if f.get('severity') == 'ERROR'])
        
        report = {
            'scan_summary': {
                'repository': '${{ github.repository }}',
                'branch': '${{ github.ref_name }}',
                'commit': '${{ github.sha }}',
                'scan_date': datetime.utcnow().isoformat() + 'Z',
                'total_findings': total_findings,
                'critical_findings': critical_findings,
                'ai_analysis_available': bool(ai_results)
            },
            'executive_summary': ai_results.get('executive_summary', 'AI analysis in progress'),
            'risk_assessment': ai_results.get('risk_assessment', 'Pending AI analysis'),
            'remediation_priorities': ai_results.get('remediation_priorities', []),
            'compliance_impact': ai_results.get('compliance_impact', 'Under review'),
            'findings': findings[:10]  # Top 10 findings
        }
        
        with open('smartsast-report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        # Generate markdown summary for PR comment
        if critical_findings > 0:
            summary = f"üö® **SmartSAST Security Analysis**\n\n"
            summary += f"- **{critical_findings}** critical security issues found\n"
            summary += f"- **{total_findings}** total findings\n\n"
            summary += "**Immediate Action Required:** Critical vulnerabilities detected.\n"
            summary += "View full AI-enhanced analysis in the AutoSec dashboard."
        else:
            summary = f"‚úÖ **SmartSAST Security Analysis**\n\n"
            summary += f"- No critical security issues found\n"
            summary += f"- **{total_findings}** total findings for review\n\n"
            summary += "View complete AI-enhanced analysis in the AutoSec dashboard."
        
        with open('pr-comment.md', 'w') as f:
            f.write(summary)
        EOF
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const comment = fs.readFileSync('pr-comment.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Security Gate
      run: |
        CRITICAL_COUNT=$(jq '[.[] | select(.severity == "ERROR")] | length' enhanced-findings.json)
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "‚ùå SmartSAST Security Gate: $CRITICAL_COUNT critical issues found"
          echo "Review the AI-enhanced analysis in AutoSec dashboard for detailed remediation guidance"
          exit 1
        fi
        
        echo "‚úÖ SmartSAST Security Gate: Passed"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: smartsast-analysis
        path: |
          enhanced-findings.json
          ai-enhanced-results.json
          smartsast-report.json
          semgrep-raw.json
